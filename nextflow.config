manifest {
    author = 'Mykle L. Hoban, Mahsa Mousavi-Derazmahalleh'
    name = 'rainbow_bridge' 
    homePage = 'http://github.com/mhoban/rainbow_bridge'
    description = 'eDNA/metabarcoding analysis pipeline'
    mainScript = 'rainbow_bridge.nf'
    defaultBranch = 'main'
    version = '1.33.8'
    nextflowVersion = '!>=25.04.7'
}


resume = true
nextflow.enable.moduleBinaries = true


trace {
  fields = 'name,hash,status,exit,realtime,submit,%cpu,%mem'
}


/*
 * Define the pipeline parameters and their default values
 * Each of these parameters can be specified at command line (e.g. --barcode 'x.txt'); if none specified the below will be set as default 
 * We set them like this instead of inside a params {} block because this way their case gets properly translated from cameCase to kebab-case
*/

/* 
 * these options concern where to find sequence reads and barcode file, 
 * which can be done several ways 
*/
params.r1 = "R1"
params.r2 = "R2"
params.fwd = ""
params.rev = ""
params.reads = ""
params.barcode = "nofile-barcode"
params.split = false
params.splitBy = 100000
params.sampleMap = ""

/* length & quality filtering options */
params.maxQuality = 41
params.minQuality = 20
params.minAlignLen = 12
params.minLen = 50
params.mateSeparator = "/"

/* obitools/ngsfilter options */
params.noPcr = false
params.primerMismatch = 2

/* blast query options */
params.blast = false
params.blastTaxdb = 'https://ftp.ncbi.nlm.nih.gov/blast/db/taxdb.tar.gz'
params.blastDb = [] 
params.ignoreBlastEnv = false
params.maxQueryResults = 10
params.percentIdentity = 95
params.evalue = "1e-3"
params.qcov = 100

/* denoising options */
params.usearch = false
params.denoiser = params.usearch ? 'usearch' : 'vsearch'  
params.minAbundance = 8
params.alpha = 2.0
params.zotuIdentity = 0.97
try {
  params.execDenoiser = new File(params.denoiser).canExecute()
} catch (Exception e) {
  params.execDenoiser = false
}

/* general script options */
params.saveConfig = false
params.preDir = 'preprocess'
params.outDir = 'output'
params.publishMode = "symlink" 
params.standaloneTaxonomy = false
params.ncbiTaxdump = 'https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/new_taxdump/new_taxdump.zip'
/ * set project name to directory name */
params.project = new File(System.getProperty("user.dir")).getBaseName()

/* sequence handling & demultiplexing options */
params.paired = false
params.single = false
params.demultiplexedBy = "index"
params.removeAmbiguousIndices = false
params.demuxOnly = false
params.demuxedFasta = "*.fasta"
params.fastqc = false
params.demuxedExample = false

/* singularity options */
params.bindDir = ""
params.singularityCache = ""

/* taxonomy assignment / collapse options */
params.lca = false
params.dropped = "dropped"
params.zotuTable = "nofile-zotu-table"
params.blastFile = ""
params.lcaLineage = ""
params.lcaQcov = 100
params.lcaPid = 97
params.lcaDiff = 1
params.lcaEvalue = 1e-3
params.lcaFilterMaxQcov = false
params.lcaTaxonFilter = "uncultured|environmental sample|clone|synthetic"
params.lcaCaseInsensitive = true


/* insect options */
params.insect = false
params.insectSequences = 'nofile-insect-seqs'
params.insectThreshold = 0.8
params.insectOffset = 0
params.insectMinCount  = 5
params.insectPing = 0.98

/* lulu options */
params.lulu = false
params.luluMinRatioType = "min"
params.luluMinRatio = 1
params.luluMinMatch=84
params.luluMinRc=0.95

/* phyloseq options */
params.phyloseq = false
params.taxonomy = "combined"
params.tree = false
params.optimizeTree = false
params.metadata = ""

/* cleanup and finalization options */
params.taxonRemap = ""
params.taxonFilter = ""
params.controls = ""
params.controlAction = "remove"
params.controlThreshold = 0.1
params.decontamMethod = "auto"
params.dnaConcentration = ""
params.abundanceFilter = false
params.abundanceThreshold = 0.0001
params.rarefy = false
params.rarefactionMethod = "perm"
params.permutations = 100
params.taxonPriority = "lca"
params.filterMinimum = false
params.minReads = 1000
params.lcaTable = false
params.insectTable = false

/* other stuff */
params.debug = false
params.test = false
params.help = false

/* resource options */
params.maxMemory = Runtime.runtime.maxMemory()
params.maxCpus = Runtime.runtime.availableProcessors()
params.maxTime = 240.h

// the parameter case translation hasn't happened yet at this
// point in the config reading/parsing, so we'll have to handle it
// ourselves if we want consisistency. what we'll do is give the
// kebab-case version priority

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.maxMemory as nextflow.util.MemoryUnit) == 1)
        return params.maxMemory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.maxMemory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.maxTime as nextflow.util.Duration) == 1)
        return params.maxTime as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.maxTime}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.maxCpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.maxCpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}


/* Load base.config by default for all profiles */
includeConfig 'conf/base.config'

/* define execution profiles */
profiles {
  
  /* standard profile is loaded by default */
  standard {

    // make default executor local
    // and limit max cpus to param value
    executor.name = 'local'
    executor.cpus = (int)params.maxCpus
    executor.memory = params.maxMemory

    singularity {
      /* enable singularity and have it do automounts */
      enabled = true
      autoMounts = true

      // construct options for singularity bind directories
      if (params.bindDir && params.bindDir != '') {
        runOptions = "-B " + params.bindDir.split().join(" -B ")
      }

      // set singularity cache directory if specified
      if (params.singularityCache && params.singularityCache != "") {
        cacheDir = params.singularityCache
      }
    }
  }

  /* use podman as container engine assuming ARM architecture */
  /* (e.g., for mac with apple silicon) */
  podman_arm {
    podman {
      enabled = true
      runOptions = "--platform linux/arm64"
    }
  }

  /* use podman as container assuming intel architecture */
  /* (e.g., for mac with intel silicon) */
  podman_intel {
    podman {
      enabled = true
      runOptions = "--platform linux/amd64"
    }
  }
}
