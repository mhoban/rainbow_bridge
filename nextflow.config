manifest {
    author = 'Mykle L. Hoban, Mahsa Mousavi-Derazmahalleh'
    name = 'rainbow_bridge' 
    homePage = 'http://github.com/mhoban/rainbow_bridge'
    description = 'eDNA/metabarcoding analysis pipeline'
    mainScript = 'rainbow_bridge.nf'
    defaultBranch = 'main'
    version = '1.33.8'
    nextflowVersion = '!>=25.04.7'
}


resume = true
nextflow.enable.moduleBinaries = true


trace {
  fields = 'name,hash,status,exit,realtime,submit,%cpu,%mem'
}


/*
 * Define the pipeline parameters and their default values
 * Each of these parameters can be specified at command line (e.g. --barcode 'x.txt'); if none specified the below will be set as default 
 * We set them like this instead of inside a params {} block because this way their case gets properly translated from cameCase to kebab-case
*/
params { 
  /* 
  * these options concern where to find sequence reads and barcode file, 
  * which can be done several ways 
  */
  r1 = "R1"
  r2 = "R2"
  fwd = ""
  rev = ""
  reads = ""
  barcode = "nofile-barcode"
  split = false
  splitBy = 100000
  sampleMap = ""

  /* length & quality filtering options */
  maxQuality = 41
  minQuality = 20
  minAlignLen = 12
  minLen = 50
  mateSeparator = "/"

  /* obitools/ngsfilter options */
  noPcr = false
  primerMismatch = 2

  /* blast query options */
  blast = false
  blastTaxdb = 'https://ftp.ncbi.nlm.nih.gov/blast/db/taxdb.tar.gz'
  blastDb = [] 
  ignoreBlastEnv = false
  maxQueryResults = 10
  percentIdentity = 95
  evalue = "1e-3"
  qcov = 100

  /* denoising options */
  denoiser = 'vsearch'  
  usearch = false
  minAbundance = 8
  alpha = 2.0
  zotuIdentity = 0.97

  /* general script options */
  saveConfig = false
  preDir = 'preprocess'
  outDir = 'output'
  publishMode = "symlink" 
  standaloneTaxonomy = false
  ncbiTaxdump = 'https://ftp.ncbi.nlm.nih.gov/pub/taxonomy/new_taxdump/new_taxdump.zip'
  / * set project name to directory name */
  project = new File(System.getProperty("user.dir")).getBaseName()

  /* sequence handling & demultiplexing options */
  paired = false
  single = false
  demultiplexedBy = "index"
  removeAmbiguousIndices = false
  demuxOnly = false
  demuxedFasta = "*.fasta"
  fastqc = false
  demuxedExample = false

  /* singularity options */
  bindDir = ""
  singularityCache = ""

  /* taxonomy assignment / collapse options */
  lca = false
  dropped = "dropped"
  zotuTable = "nofile-zotu-table"
  blastFile = ""
  lcaLineage = ""
  lcaQcov = 100
  lcaPid = 97
  lcaDiff = 1
  lcaEvalue = 1e-3
  lcaFilterMaxQcov = false
  lcaTaxonFilter = "uncultured|environmental sample|clone|synthetic"
  lcaCaseInsensitive = true


  /* insect options */
  insect = false
  insectSequences = 'nofile-insect-seqs'
  insectThreshold = 0.8
  insectOffset = 0
  insectMinCount  = 5
  insectPing = 0.98

  /* lulu options */
  lulu = false
  luluMinRatioType = "min"
  luluMinRatio = 1
  luluMinMatch=84
  luluMinRc=0.95

  /* phyloseq options */
  phyloseq = false
  taxonomy = "combined"
  tree = false
  optimizeTree = false
  metadata = ""

  /* cleanup and finalization options */
  taxonRemap = ""
  taxonFilter = ""
  controls = ""
  controlAction = "remove"
  controlThreshold = 0.1
  decontamMethod = "auto"
  dnaConcentration = ""
  abundanceFilter = false
  abundanceThreshold = 0.0001
  rarefy = false
  rarefactionMethod = "perm"
  permutations = 100
  taxonPriority = "lca"
  filterMinimum = false
  minReads = 1000
  lcaTable = false
  insectTable = false

  /* other stuff */
  debug = false
  test = false
  help = false

  /* resource options */
  maxMemory = Runtime.runtime.maxMemory()
  maxCpus = Runtime.runtime.availableProcessors()
  maxTime = 240.h
}
// the parameter case translation hasn't happened yet at this
// point in the config reading/parsing, so we'll have to handle it
// ourselves if we want consisistency. what we'll do is give the
// kebab-case version priority

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.maxMemory as nextflow.util.MemoryUnit) == 1)
        return params.maxMemory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.maxMemory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.maxTime as nextflow.util.Duration) == 1)
        return params.maxTime as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.maxTime}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.maxCpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.maxCpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}


/* Load base.config by default for all profiles */
includeConfig 'conf/base.config'

/* define execution profiles */
profiles {
  
  /* standard profile is loaded by default */
  standard {

    // make default executor local
    // and limit max cpus to param value
    executor.name = 'local'
    executor.cpus = (int)params.maxCpus
    executor.memory = params.maxMemory

    singularity {
      /* enable singularity and have it do automounts */
      enabled = true
      autoMounts = true

      // construct options for singularity bind directories
      if (params.bindDir && params.bindDir != '') {
        runOptions = "-B " + params.bindDir.split().join(" -B ")
      }

      // set singularity cache directory if specified
      if (params.singularityCache && params.singularityCache != "") {
        cacheDir = params.singularityCache
      }
    }
  }

  /* use podman as container engine assuming ARM architecture */
  /* (e.g., for mac with apple silicon) */
  podman_arm {
    podman {
      enabled = true
      runOptions = "--platform linux/arm64"
    }
  }

  /* use podman as container assuming intel architecture */
  /* (e.g., for mac with intel silicon) */
  podman_intel {
    podman {
      enabled = true
      runOptions = "--platform linux/amd64"
    }
  }
}
