int cores = (int)get_p(params,'maxCpus')
nextflow.util.MemoryUnit mem = get_p(params,'maxMemory') as nextflow.util.MemoryUnit
nextflow.util.Duration d = get_p(params,'maxTime') as nextflow.util.Duration
insect = get_p(params,"insect")
blast = get_p(params,"blast")
demux = get_p(params,"demultiplexedBy") == "index"
split = get_p(params,"split")


/*
 * general process options (mainly which labels go with which docker/singulariy images)
 * but also the base resource usage settings
*/
process {
  withLabel: 'fastqc'         { container = 'biocontainers/fastqc:v0.11.9_cv7' }
  withLabel: 'adapterRemoval' { container = 'biocontainers/adapterremoval:v2.2.0-1-deb_cv1' }
  withLabel: 'obitools'       { container = 'biocontainers/obitools:v1.2.12dfsg-2-deb_cv1' }
  withLabel: 'r'              { container = 'fishbotherer/r-tools:latest' }
  withLabel: 'shell'          { container = 'nextflow/bash:latest' }
  withLabel: 'multiqc'        { container = 'multiqc/multiqc:latest'}

  withLabel: 'denoiser' {
    if (params.execDenoiser)
      container = ''
    else if (params.denoiser == "vsearch") {
      container = 'biocontainers/vsearch:v2.10.4-1-deb_cv1'
    } else if (params.denoiser in ['usearch','usearch32']) {
      container = 'sunqiangkun/usearch:v1' 
    }
  }

  // these labels control how many cpus get used based on certain conditions
 
  // give 4 cpus to AdapterRemoval
	withLabel: 'demux_cpus' {
    cpus = cores >= 4 ? 4 : 1
  }

  // allow all cpus
	withLabel: 'all_cpus' { cpus = { cores } }

  // allocate blast cpus
  withLabel: 'blast' {
    cpus = { params.insect ? cores / 2 : cores }
    memory = { params.insect ? mem / 2 : mem }
    container = 'ncbi/blast:latest'
  }

  // alloacte insect cpus
  withLabel: 'insect' {
    cpus = { params.blast ? cores / 2 : cores }
    memory = { params.blast ? mem / 2 : mem }
    container = 'fishbotherer/r-tools:latest'
  }

  cache = 'lenient' 

  // set default cpus and memory
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 6.GB * task.attempt, 'memory' ) }
}
