/*
 * general process options (mainly which labels go with which docker/singulariy images)
 * but also the base resource usage settings
*/
process {
  withLabel: 'shell'        { container = 'quay.io/nextflow/bash:latest' }
  withLabel: 'obitools'     { container = 'quay.io/biocontainers/obitools:1.2.13--py27heb79e2c_3' }
  withLabel: 'blast'        { container = 'quay.io/biocontainers/blast:2.17.0--h66d330f_0' }
  withLabel: 'r'            { container = 'fishbotherer/r-tools:latest' }

  withName: 'fastqc'        { container = 'quay.io/biocontainers/fastqc:0.12.1--hdfd78af_0 ' }
  withName: 'filter_merge'  { container = 'quay.io/biocontainers/adapterremoval:2.3.4--pl5321haf24da9_1' }
  withName: 'multiqc'       { container = 'quay.io/biocontainers/multiqc:1.27.1--pyhdfd78af_0' }
  withName: 'extract_zip'   { container = 'quay.io/biocontainers/unzip:6.0' }
  withName: 'extract_ncbi_taxonomy' { publishDir = [ path: 'output/taxonomy/ncbi', pattern: '*.zip' ] }
  withName: 'extract_ncbi_taxdb'    { publishDir = [ path: 'output/taxonomy/ncbi', pattern: '*.tar.gz' ] }
  withName: 'blast' {
    // get extra blast options passed on the command line as --blastn-*
    // doing this here avoids caching issues when the overall params map changes
    ext.blastn_args = { 
      params
        .findAll { it.key =~ /^blastn[A-Z].+/ }
        .collectEntries { k, v -> [k.replaceAll(/^blastn/,'').toLowerCase(),v] }
        .collect { k, v -> v == true ? "-${k}" : "-${k} ${v}" }
        .join(" ") 
    }
  }

  

  withLabel: 'denoiser' {
    container = params.denoiser == 'vsearch' ? 
      'quay.io/biocontainers/vsearch:2.30.0--hd6d6fdc_0' : 
      // 'quay.io/biocontainers/usearch:11.0.667--h9ee0642_0'
      'quay.io/biocontainers/usearch:12.0_beta--h9ee0642_1'
  }

  // these labels control various aspects of resource allocation
  withLabel:process_single {
    cpus   = { 1           }
    memory = { 6.GB * task.attempt }
    // time   = { 4.h  * task.attempt }
  }
  withLabel:process_low {
    cpus   = { 2   * task.attempt }
    memory = { 12.GB * task.attempt }
    // time   = { 4.h   * task.attempt }
  }
  withLabel:process_lowish {
    cpus   = { 4   * task.attempt }
    memory = { 12.GB * task.attempt }
    // time   = { 4.h   * task.attempt }
  }
  withLabel:process_medium {
    cpus   = { 6   * task.attempt }
    memory = { 36.GB * task.attempt }
    // time   = { 8.h   * task.attempt }
  }
  withLabel:process_high {
    cpus   = { 12  * task.attempt }
    memory = { 72.GB * task.attempt }
    // time   = { 16.h  * task.attempt }
  }
  withLabel:process_more_memory {
    memory = { 10.GB * task.attempt }
  }
  withLabel:process_high_memory {
    memory = { 200.GB * task.attempt }
  }
  withLabel:error_ignore {
    errorStrategy = 'ignore'
  }
  withLabel:error_retry {
    errorStrategy = 'retry'
    maxRetries  = 2
  } 
  // allow all cpus
	withLabel: 'all_cpus' { cpus = { (int)params.maxCpus } }

  cache = 'lenient'

  // set default cpus and memory
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 6.GB * task.attempt, 'memory' ) }
}
